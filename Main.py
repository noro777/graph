# -*- coding: utf-8 -*-
"""graph_imp2.ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19HYtruEKiOTZCLQ_ImNIVsNCnHNTiwFj
"""

import numpy as np
from numpy.linalg import matrix_power

C_matrix = [[1,3],
            [2,3],
            [2,4],
            [3,4],
            [3,5],
            [4,5],
            [4,7],
            [5,6],
            [6,7],
            [6,0],
            [7,0]]

max_node = np.amax(C_matrix)
print(max_node)

"""##T1 and T3"""

t1 = set()
t3 = set()

for i in range(len(C_matrix)):
  flag = 1
  st_elem =C_matrix[i][0]
  for j in range(len(C_matrix)):
    if st_elem == C_matrix[j][1]:
      flag = 0
      break
  if flag == 1:
    t1.add(st_elem)
    

for i in range(len(C_matrix)):
  if C_matrix[i][1] == 0:
    t3.add(C_matrix[i][0])

print(t1)
print(t3)

"""## T2 


"""

t2 = set()

for i in range(len(C_matrix)):
  elem = C_matrix[i][0]
  if C_matrix[i][1] == 0:
    continue
  for j in range(len(C_matrix)):
    if elem  == C_matrix[j][1] and (elem not in t2):
      t2.add(elem)

print(t2)

"""## T5"""

t5 = 0

for i in t2:
  for j in range(len(C_matrix)):
    if i == C_matrix[j][0] and C_matrix[j][1] in t2:
      t5+=1
      
print(t5)

t6=0

for i in t3:
  for j in range(len(C_matrix)):
    if i == C_matrix[j][0] and C_matrix[j][1] in t3:
      t6+=1
print(t6)

"""## A matrix creation

"""

size_A = max(t3)

A= np.zeros((size_A,size_A),dtype=np.int8)

for i in range(len(C_matrix)-len(t3)):
  A[C_matrix[i][0]-1][C_matrix[i][1]-1] = 1

A

A_matrices = {"A1":A}
print(A_matrices)

i = 2
while True:
  last_A = matrix_power(A_matrices["A1"],i)
  if last_A.sum() == 0:
    print("A{}".format(i))
    print(last_A)
    A_matrices["A{}".format(i)] = last_A
    break
  else:
    if last_A.diagonal().sum()>0:
      print("A{}".format(i))
      print("LOOP")
      print(last_A)
      break;
    else:
      print("A{}".format(i))
      print(last_A)
      A_matrices["A{}".format(i)] = last_A 
      i+=1

d = sum(A_matrices.values())
print(d)

"""## T4 and T7 calculation"""

def t4_calc(mat):
  count = 0
  for i in range(size_A):
    if mat[:,i].sum() == 0:
      count+=1
  return count

t4_dict={}
t7_dict={}

p=1
for i in A_matrices.values():
  T4 = t4_calc(i)
  t4_dict["A{}".format(p)]= T4
  t7_dict["A{}".format(p)]= T4 - p 
  p+=1

print(t4_dict)
print(t7_dict)

"""## K"""

Kmo ={}

p=1
for i in range(len(t4_dict)):
  Kmo["A{}".format(p)] = format(t7_dict["A{}".format(p)]/t4_dict["A{}".format(p)],'.3f')
  p+=1
print(Kmo)

Kmo_mean = np.mean([float(value) for value in Kmo.values()])

Km = len(t2)/max_node
print(Km)